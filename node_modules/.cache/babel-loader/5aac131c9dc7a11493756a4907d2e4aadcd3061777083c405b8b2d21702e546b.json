{"ast":null,"code":"import{useState,useEffect}from\"react\";import{projectFirestore,projectAuth}from\"../firebase/config\";import{collection,addDoc,getDocs,query,where,orderBy,Timestamp}from\"firebase/firestore\";import{onAuthStateChanged}from\"firebase/auth\";const useReviews=productNumber=>{const[reviews,setReviews]=useState([]);const[reviewText,setReviewText]=useState(\"\");const[user,setUser]=useState(null);useEffect(()=>{const fetchReviews=async()=>{const getReviews=await getDocs(query(collection(projectFirestore,\"reviews\"),where(\"product\",\"==\",productNumber),orderBy(\"timestamp\",\"desc\")));const reviewsData=getReviews.docs.map(doc=>({...doc.data(),id:doc.id}));setReviews(reviewsData);};fetchReviews();},[productNumber]);useEffect(()=>{const unsubscribe=onAuthStateChanged(projectAuth,user=>{if(user){setUser(user);}else{setUser(null);}});return()=>unsubscribe();},[]);const handleReviewSubmit=async()=>{const newReview={username:user?user.email:\"Anonymous\",date:new Date().toLocaleDateString(),text:reviewText,product:productNumber,timestamp:Timestamp.now()};try{const docReference=await addDoc(collection(projectFirestore,\"reviews\"),newReview);setReviews([...reviews,{...newReview,id:docReference.id}]);setReviewText(\"\");}catch(err){console.error(\"Error adding a new review: \",err);}};return{reviews,reviewText,setReviewText,handleReviewSubmit,user,setReviews};};export default useReviews;","map":{"version":3,"names":["useState","useEffect","projectFirestore","projectAuth","collection","addDoc","getDocs","query","where","orderBy","Timestamp","onAuthStateChanged","useReviews","productNumber","reviews","setReviews","reviewText","setReviewText","user","setUser","fetchReviews","getReviews","reviewsData","docs","map","doc","data","id","unsubscribe","handleReviewSubmit","newReview","username","email","date","Date","toLocaleDateString","text","product","timestamp","now","docReference","err","console","error"],"sources":["/Users/zhaoruzhu/Downloads/StartupSystem/milestone-3-2/modern-shop/src/hooks/useReviews.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { projectFirestore, projectAuth } from \"../firebase/config\";\nimport {\n  collection,\n  addDoc,\n  getDocs,\n  query,\n  where,\n  orderBy,\n  Timestamp,\n} from \"firebase/firestore\";\nimport { onAuthStateChanged } from \"firebase/auth\";\n\nconst useReviews = (productNumber) => {\n  const [reviews, setReviews] = useState([]);\n  const [reviewText, setReviewText] = useState(\"\");\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const getReviews = await getDocs(\n        query(\n          collection(projectFirestore, \"reviews\"),\n          where(\"product\", \"==\", productNumber),\n          orderBy(\"timestamp\", \"desc\")\n        )\n      );\n      const reviewsData = getReviews.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n      }));\n      setReviews(reviewsData);\n    };\n\n    fetchReviews();\n  }, [productNumber]);\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(projectAuth, (user) => {\n      if (user) {\n        setUser(user);\n      } else {\n        setUser(null);\n      }\n    });\n\n    return () => unsubscribe();\n  }, []);\n\n  const handleReviewSubmit = async () => {\n    const newReview = {\n      username: user ? user.email : \"Anonymous\",\n      date: new Date().toLocaleDateString(),\n      text: reviewText,\n      product: productNumber,\n      timestamp: Timestamp.now(),\n    };\n\n    try {\n      const docReference = await addDoc(\n        collection(projectFirestore, \"reviews\"),\n        newReview\n      );\n      setReviews([...reviews, { ...newReview, id: docReference.id }]);\n      setReviewText(\"\");\n    } catch (err) {\n      console.error(\"Error adding a new review: \", err);\n    }\n  };\n\n  return {\n    reviews,\n    reviewText,\n    setReviewText,\n    handleReviewSubmit,\n    user,\n    setReviews,\n  };\n};\n\nexport default useReviews;\n"],"mappings":"AAAA,OAASA,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAC3C,OAASC,gBAAgB,CAAEC,WAAW,KAAQ,oBAAoB,CAClE,OACEC,UAAU,CACVC,MAAM,CACNC,OAAO,CACPC,KAAK,CACLC,KAAK,CACLC,OAAO,CACPC,SAAS,KACJ,oBAAoB,CAC3B,OAASC,kBAAkB,KAAQ,eAAe,CAElD,KAAM,CAAAC,UAAU,CAAIC,aAAa,EAAK,CACpC,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAC1C,KAAM,CAACgB,UAAU,CAAEC,aAAa,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAChD,KAAM,CAACkB,IAAI,CAAEC,OAAO,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAEtCC,SAAS,CAAC,IAAM,CACd,KAAM,CAAAmB,YAAY,CAAG,KAAAA,CAAA,GAAY,CAC/B,KAAM,CAAAC,UAAU,CAAG,KAAM,CAAAf,OAAO,CAC9BC,KAAK,CACHH,UAAU,CAACF,gBAAgB,CAAE,SAAS,CAAC,CACvCM,KAAK,CAAC,SAAS,CAAE,IAAI,CAAEK,aAAa,CAAC,CACrCJ,OAAO,CAAC,WAAW,CAAE,MAAM,CAC7B,CACF,CAAC,CACD,KAAM,CAAAa,WAAW,CAAGD,UAAU,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,GAAM,CAChD,GAAGA,GAAG,CAACC,IAAI,CAAC,CAAC,CACbC,EAAE,CAAEF,GAAG,CAACE,EACV,CAAC,CAAC,CAAC,CACHZ,UAAU,CAACO,WAAW,CAAC,CACzB,CAAC,CAEDF,YAAY,CAAC,CAAC,CAChB,CAAC,CAAE,CAACP,aAAa,CAAC,CAAC,CAEnBZ,SAAS,CAAC,IAAM,CACd,KAAM,CAAA2B,WAAW,CAAGjB,kBAAkB,CAACR,WAAW,CAAGe,IAAI,EAAK,CAC5D,GAAIA,IAAI,CAAE,CACRC,OAAO,CAACD,IAAI,CAAC,CACf,CAAC,IAAM,CACLC,OAAO,CAAC,IAAI,CAAC,CACf,CACF,CAAC,CAAC,CAEF,MAAO,IAAMS,WAAW,CAAC,CAAC,CAC5B,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAC,kBAAkB,CAAG,KAAAA,CAAA,GAAY,CACrC,KAAM,CAAAC,SAAS,CAAG,CAChBC,QAAQ,CAAEb,IAAI,CAAGA,IAAI,CAACc,KAAK,CAAG,WAAW,CACzCC,IAAI,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,kBAAkB,CAAC,CAAC,CACrCC,IAAI,CAAEpB,UAAU,CAChBqB,OAAO,CAAExB,aAAa,CACtByB,SAAS,CAAE5B,SAAS,CAAC6B,GAAG,CAAC,CAC3B,CAAC,CAED,GAAI,CACF,KAAM,CAAAC,YAAY,CAAG,KAAM,CAAAnC,MAAM,CAC/BD,UAAU,CAACF,gBAAgB,CAAE,SAAS,CAAC,CACvC4B,SACF,CAAC,CACDf,UAAU,CAAC,CAAC,GAAGD,OAAO,CAAE,CAAE,GAAGgB,SAAS,CAAEH,EAAE,CAAEa,YAAY,CAACb,EAAG,CAAC,CAAC,CAAC,CAC/DV,aAAa,CAAC,EAAE,CAAC,CACnB,CAAE,MAAOwB,GAAG,CAAE,CACZC,OAAO,CAACC,KAAK,CAAC,6BAA6B,CAAEF,GAAG,CAAC,CACnD,CACF,CAAC,CAED,MAAO,CACL3B,OAAO,CACPE,UAAU,CACVC,aAAa,CACbY,kBAAkB,CAClBX,IAAI,CACJH,UACF,CAAC,CACH,CAAC,CAED,cAAe,CAAAH,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}